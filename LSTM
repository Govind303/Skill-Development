!pip install gradio tensorflow

import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
import gradio as gr

# Generate training data
def generate_sequence(n_samples=1000):
    X, y = [], []
    for _ in range(n_samples):
        start = np.random.randint(1, 100)
        seq = [start, start + 5, start + 10]
        X.append(seq)
        y.append(start + 15)
    return np.array(X), np.array(y)

# Prepare data
X, y = generate_sequence()
X = X.reshape((X.shape[0], X.shape[1], 1))
y = y.reshape(-1, 1)

# Build LSTM model
model = Sequential([
    LSTM(64, activation='relu', input_shape=(3, 1)),
    Dense(1)
])
model.compile(optimizer='adam', loss='mse')
model.fit(X, y, epochs=20, batch_size=32, verbose=0)

# Prediction function for Gradio
def predict_next_number(n1, n2, n3):
    input_seq = np.array([[n1, n2, n3]]).reshape((1, 3, 1))
    pred = model.predict(input_seq, verbose=0)[0][0]
    return f"Next predicted number: {pred:.2f}"

# Gradio UI
iface = gr.Interface(
    fn=predict_next_number,
    inputs=[
        gr.Number(label="1st Number"),
        gr.Number(label="2nd Number"),
        gr.Number(label="3rd Number")
    ],
    outputs=gr.Textbox(label="Prediction"),
    title="LSTM Sequence Predictor",
    description="Enter 3 numbers in a pattern (e.g., 10, 15, 20) to predict the next one."
)

iface.launch()
