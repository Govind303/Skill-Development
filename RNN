import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import SimpleRNN, Dense

# Generate dummy sequential data
def generate_sequence(n_samples=1000):
    X, y = [], []
    for i in range(n_samples):
        start = np.random.randint(1, 100)
        seq = np.array([start, start + 10, start + 20])
        target = start + 30
        X.append(seq)
        y.append(target)
    return np.array(X), np.array(y)

# Prepare data
X, y = generate_sequence()
X = X.reshape((X.shape[0], X.shape[1], 1))  # RNN expects 3D input: [samples, timesteps, features]
y = y.reshape(-1, 1)

# Build RNN model
model = Sequential([
    SimpleRNN(50, activation='relu', input_shape=(3, 1)),
    Dense(1)
])

# Compile
model.compile(optimizer='adam', loss='mse')

# Train
model.fit(X, y, epochs=20, batch_size=32)

# Predict
test_input = np.array([[50, 60, 70]]).reshape((1, 3, 1))
predicted = model.predict(test_input)
print(f"Predicted next number: {predicted[0][0]:.2f}")
